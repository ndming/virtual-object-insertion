import coloredlogs, logging, os
from argparse import ArgumentParser
from pathlib import Path
from shutil import move
from subprocess import PIPE, DEVNULL, Popen, run
from tqdm import tqdm


def run_pbrt(pbrt_file, render_file, gpu_enabled, logger):
    logger.info(f"[pbrt] invoking renderer for: {render_file.name}")

    pbrt_cmd = f"{pbrt_file} {render_file}"
    if (gpu_enabled): 
        pbrt_cmd += " --gpu"

    process = Popen(pbrt_cmd, stdout=DEVNULL, stderr=PIPE, universal_newlines=True)

    with tqdm(desc="Rendering") as pbar:
        while process.poll() is None:
            pbar.update(1)

    result = process.wait()

    if result != 0:
        logger.error(f"error rendering file: {render_file.name}")
        stderr_content = process.stderr.read()
        logger.error(stderr_content)
        exit(1)


def run_imgtool(cmd, logger):
    result = run(cmd, shell=True, capture_output=True, text=True)

    if result.returncode != 0:
        logger.error("error running imgtool:")
        logger.error(result.stderr)
        exit(1)


if __name__ == "__main__":
    logger = logging.getLogger(__name__)
    logger.setLevel(logging.DEBUG)
    coloredlogs.install(
        level='DEBUG', logger=logger, 
        fmt='%(asctime)s - %(levelname)s - %(message)s', datefmt='%H:%M:%S'
    )

    parser = ArgumentParser()
    parser.add_argument(
        "--resource-dir", type=str, required=True, 
        help="path to the directory containing resources generated by objgen"
    )
    parser.add_argument(
        '--pbrt-dir', type=str, required=True, 
        help="path to the directory contaning pbrt and imgtool executables"
    )
    parser.add_argument(
        '-exr', action='store_true', 
        help="run in HDR mode, must be turned on if objgen was run in this mode"
    )
    parser.add_argument(
        '-gpu', action='store_true', 
        help="use wavefront rendering (GPU) for pbrt"
    )
    args = parser.parse_args()

    res_dir = Path(os.path.abspath(args.resource_dir))
    pbrt_dir = Path(os.path.abspath(args.pbrt_dir))

    # Use the imgtool program to convert equirectangular map to
    # its octahedral equal area representation
    # ---
    imgtool_file = pbrt_dir/"imgtool"
    exr_file = res_dir/"env.exr"
    imgtool_cmd = f"{imgtool_file} makeequiarea {exr_file} --outfile {exr_file}"
        
    logger.info(f"[imgtool] encoding env map as octahedral representation...")
    run_imgtool(imgtool_cmd, logger)
    logger.info(f"EXR file written to: {exr_file.resolve().relative_to(Path.cwd())}")

    # Use the imgtool program to convert albedo.png map to albedo.exr
    # ---
    albedo_file = res_dir/"albedo.png"
    albedo_exr_file = res_dir/"albedo.exr"
    imgtool_cmd = f"{imgtool_file} convert {albedo_file} --outfile {albedo_exr_file}"

    logger.info(f"[imgtool] converting albedo to EXR...")
    run_imgtool(imgtool_cmd, logger)
    logger.info(f"EXR file written to: {albedo_exr_file.resolve().relative_to(Path.cwd())}")

    # Render all scenes with pbrt
    # ---
    pbrt_file = pbrt_dir/"pbrt"

    # Render the I_all scene
    scene_render_file = res_dir/"scene.pbrt"
    scene_film_name = "scene.exr" if args.exr else "scene.png"
    run_pbrt(pbrt_file, scene_render_file, args.gpu, logger)
    move(scene_film_name, res_dir/scene_film_name)

    # Render the I_pln scene
    plane_film_name = "plane.exr" if args.exr else "plane.png"
    plane_render_file = res_dir/"plane.pbrt"
    run_pbrt(pbrt_file, plane_render_file, args.gpu, logger)
    move(plane_film_name, res_dir/plane_film_name)

    # Render the M_all scene
    mall_render_file = res_dir/"mask_all.pbrt"
    mall_film_name = "mask_all.png"
    run_pbrt(pbrt_file, mall_render_file, args.gpu, logger)
    move(mall_film_name, res_dir/mall_film_name)

    # Render the M_obj scene
    mobj_render_file = res_dir/"mask_obj.pbrt"
    mobj_film_name = "mask_obj.png"
    run_pbrt(pbrt_file, mobj_render_file, args.gpu, logger)
    move(mobj_film_name, res_dir/mobj_film_name)

    relative_output_dir = res_dir.resolve().relative_to(Path.cwd())
    logger.info(f"all rendered files have been moved to {relative_output_dir}")